/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { AssigningShapeStyleEventArgsDescriptionMetadata } from "./AssigningShapeStyleEventArgsDescriptionMetadata";
import { AssigningShapeMarkerStyleEventArgsDescriptionMetadata } from "./AssigningShapeMarkerStyleEventArgsDescriptionMetadata";
import { StyleShapeEventArgsDescriptionMetadata } from "./StyleShapeEventArgsDescriptionMetadata";
import { SeriesDescriptionMetadata } from "./SeriesDescriptionMetadata";
/**
 * @hidden
 */
var ShapeSeriesBaseDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(ShapeSeriesBaseDescriptionMetadata, _super);
    function ShapeSeriesBaseDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ShapeSeriesBaseDescriptionMetadata.b = function (a) {
        if (ShapeSeriesBaseDescriptionMetadata.a == null) {
            ShapeSeriesBaseDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            ShapeSeriesBaseDescriptionMetadata.c(a, ShapeSeriesBaseDescriptionMetadata.a);
            AssigningShapeStyleEventArgsDescriptionMetadata.d(a);
            AssigningShapeMarkerStyleEventArgsDescriptionMetadata.d(a);
            StyleShapeEventArgsDescriptionMetadata.d(a);
        }
    };
    ShapeSeriesBaseDescriptionMetadata.c = function (a, b) {
        SeriesDescriptionMetadata.c(a, b);
        b.item("IsCustomShapeStyleAllowed", "Boolean");
        b.item("IsCustomShapeMarkerStyleAllowed", "Boolean");
        b.item("ActualItemSearchMode", "ExportedType:string:ShapeItemSearchMode");
        b.item("ActualItemSearchMode@names", "Auto;ClosestBoundingBox;ClosestShape;ClosestPointOnClosestShape;None");
        b.item("ItemSearchMode", "ExportedType:string:ShapeItemSearchMode");
        b.item("ItemSearchMode@names", "Auto;ClosestBoundingBox;ClosestShape;ClosestPointOnClosestShape;None");
        b.item("ItemSearchThreshold", "Number:int");
        b.item("ItemSearchPointsThreshold", "Number:int");
        b.item("ShapeMemberPath", "String");
        b.item("XAxisRef", "(w:XAxis,wf:XAxis)DataRef::object");
        b.item("XAxisRef@nameBinding", "true");
        b.item("YAxisRef", "(w:YAxis,wf:YAxis)DataRef::object");
        b.item("YAxisRef@nameBinding", "true");
        b.item("ShapeFilterResolution", "Number:double");
        b.item("AssigningShapeStyleRef", "EventRef::assigningShapeStyle");
        b.item("AssigningShapeMarkerStyleRef", "EventRef::assigningShapeMarkerStyle");
        b.item("StyleShapeRef", "EventRef::styleShape");
    };
    ShapeSeriesBaseDescriptionMetadata.d = function (a) {
        ShapeSeriesBaseDescriptionMetadata.b(a);
        a.p("ShapeSeriesBase", ShapeSeriesBaseDescriptionMetadata.a);
    };
    ShapeSeriesBaseDescriptionMetadata.$t = markType(ShapeSeriesBaseDescriptionMetadata, 'ShapeSeriesBaseDescriptionMetadata');
    ShapeSeriesBaseDescriptionMetadata.a = null;
    return ShapeSeriesBaseDescriptionMetadata;
}(Base));
export { ShapeSeriesBaseDescriptionMetadata };
//# sourceMappingURL=ShapeSeriesBaseDescriptionMetadata.js.map
