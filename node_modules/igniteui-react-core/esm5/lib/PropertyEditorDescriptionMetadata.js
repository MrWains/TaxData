/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { PropertyEditorDescription } from "./PropertyEditorDescription";
/**
 * @hidden
 */
var PropertyEditorDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(PropertyEditorDescriptionMetadata, _super);
    function PropertyEditorDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyEditorDescriptionMetadata.b = function (a) {
        if (PropertyEditorDescriptionMetadata.a == null) {
            PropertyEditorDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            PropertyEditorDescriptionMetadata.c(a, PropertyEditorDescriptionMetadata.a);
        }
    };
    PropertyEditorDescriptionMetadata.c = function (a, b) {
        b.item("ActualDataSource", "(w:ActualProperties,wf:ActualProperties)Collection:PropertyEditorPropertyDescription:PropertyEditorPropertyDescriptionCollection:PropertyEditorPropertyDescription");
        b.item("Properties", "Collection:PropertyEditorPropertyDescription:PropertyEditorPropertyDescriptionCollection:PropertyEditorPropertyDescription");
        b.item("FilterPlaceholderText", "String");
        b.item("SearchInputType", "ExportedType:string:InputGroupDisplayType");
        b.item("SearchInputType@names", "Line;Box;Border;Search");
        b.item("RowHeight", "Number:int");
        b.item("CellFontFamily", "(w:CellFontFamily/FontFamilyTransform,wf:CellFontFamily,web:cellTextStyle/FontFamilyTransform)String");
        b.item("CellFontSize", "(w:CellFontSize,wf:CellFontSize,web:cellTextStyle/FontSizeTransform)Number:double");
        b.item("CellFontStyle", "(w:CellFontStyle/FontStyleTransform,wf:CellFontFamily/FontStyleTransform,web:cellTextStyle/FontStyleTransform)String");
        b.item("CellFontWeight", "(w:CellFontWeight/FontWeightTransform,wf:CellFontFamily/FontWeightTransform,web:cellTextStyle/FontWeightTransform)String");
        b.item("BaseTheme", "ExportedType:string:BaseControlTheme");
        b.item("BaseTheme@names", "Default;DenaliLight;MaterialLight");
        b.item("Density", "ExportedType:string:ControlDisplayDensity");
        b.item("Density@names", "Auto;Comfortable;Cosy;Compact");
        b.item("DescriptionContextRef", "(w:DescriptionContext,wf:DescriptionContext)DataRef::object");
        b.item("ComponentRendererRef", "(w:ComponentRenderer,wf:ComponentRenderer)DataRef::object");
        b.item("TargetRef", "(w:Target,wf:Target)DataRef::object");
        b.item("DescriptionType", "String");
        b.item("IsHorizontal", "Boolean");
        b.item("IsWrappingEnabled", "Boolean");
        b.item("IsIndirectModeEnabled", "Boolean");
        b.item("BackgroundColor", "Brush");
        b.item("TextColor", "Brush");
        PropertyEditorDescriptionMetadata.e(a, b);
    };
    PropertyEditorDescriptionMetadata.d = function (a) {
        PropertyEditorDescriptionMetadata.b(a);
        a.q("PropertyEditor", function () { return new PropertyEditorDescription(); });
        a.p("PropertyEditor", PropertyEditorDescriptionMetadata.a);
    };
    PropertyEditorDescriptionMetadata.e = function (a, b) {
        b.item("_qualifiedName", "String:Infragistics.Controls.Grids.XamPropertyEditor");
        b.item("Width", "(w:Width/DimensionTransform)String");
        b.item("Height", "(w:Height/DimensionTransform)String");
        b.item("Background", "(wf:BackColor/ColorTransform)Brush");
    };
    PropertyEditorDescriptionMetadata.$t = markType(PropertyEditorDescriptionMetadata, 'PropertyEditorDescriptionMetadata');
    PropertyEditorDescriptionMetadata.a = null;
    return PropertyEditorDescriptionMetadata;
}(Base));
export { PropertyEditorDescriptionMetadata };
//# sourceMappingURL=PropertyEditorDescriptionMetadata.js.map
