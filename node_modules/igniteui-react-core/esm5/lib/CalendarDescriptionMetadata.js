/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { ValueChangedEventArgsDescriptionMetadata } from "./ValueChangedEventArgsDescriptionMetadata";
import { CalendarDescription } from "./CalendarDescription";
/**
 * @hidden
 */
var CalendarDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(CalendarDescriptionMetadata, _super);
    function CalendarDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CalendarDescriptionMetadata.b = function (a) {
        if (CalendarDescriptionMetadata.a == null) {
            CalendarDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            CalendarDescriptionMetadata.c(a, CalendarDescriptionMetadata.a);
            ValueChangedEventArgsDescriptionMetadata.d(a);
        }
    };
    CalendarDescriptionMetadata.c = function (a, b) {
        b.item("Value", "Date");
        b.item("Today", "Date");
        b.item("MinDate", "Date");
        b.item("MaxDate", "Date");
        b.item("Density", "ExportedType:string:ControlDisplayDensity");
        b.item("Density@names", "Auto;Comfortable;Cosy;Compact");
        b.item("BaseTheme", "ExportedType:string:BaseControlTheme");
        b.item("BaseTheme@names", "Default;DenaliLight;MaterialLight");
        b.item("BackgroundColor", "Brush");
        b.item("SelectedDateBackgroundColor", "Brush");
        b.item("SelectedFocusDateBackgroundColor", "Brush");
        b.item("FocusDateBackgroundColor", "Brush");
        b.item("HoverBackgroundColor", "Brush");
        b.item("TextColor", "Brush");
        b.item("SelectedDateTextColor", "Brush");
        b.item("FocusDateTextColor", "Brush");
        b.item("CurrentDateTextColor", "Brush");
        b.item("CurrentDateBorderColor", "Brush");
        b.item("ShowTodayButton", "Boolean");
        b.item("FontFamily", "(w:FontFamily/FontFamilyTransform,wf:FontFamily,web:textStyle/FontFamilyTransform)String");
        b.item("FontSize", "(w:FontSize,wf:FontSize,web:textStyle/FontSizeTransform)Number:double");
        b.item("FontStyle", "(w:FontStyle/FontStyleTransform,wf:FontFamily/FontStyleTransform,web:textStyle/FontStyleTransform)String");
        b.item("FontWeight", "(w:FontWeight/FontWeightTransform,wf:FontFamily/FontWeightTransform,web:textStyle/FontWeightTransform)String");
        b.item("FirstDayOfWeek", "ExportedType:string:DayOfWeek");
        b.item("FirstDayOfWeek@names", "Sunday;Monday;Tuesday;Wednesday;Thursday;Friday;Saturday");
        b.item("FirstWeekOfYear", "ExportedType:string:FirstWeek");
        b.item("FirstWeekOfYear@names", "FirstDay;FirstFullWeek;FirstFourDayWeek");
        b.item("ShowWeekNumbers", "Boolean");
        b.item("ValueChangedRef", "EventRef::valueChanged");
    };
    CalendarDescriptionMetadata.d = function (a) {
        CalendarDescriptionMetadata.b(a);
        a.q("Calendar", function () { return new CalendarDescription(); });
        a.p("Calendar", CalendarDescriptionMetadata.a);
    };
    CalendarDescriptionMetadata.$t = markType(CalendarDescriptionMetadata, 'CalendarDescriptionMetadata');
    CalendarDescriptionMetadata.a = null;
    return CalendarDescriptionMetadata;
}(Base));
export { CalendarDescriptionMetadata };
//# sourceMappingURL=CalendarDescriptionMetadata.js.map
