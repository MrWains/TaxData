/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { AssigningScatterStyleEventArgsDescriptionMetadata } from "./AssigningScatterStyleEventArgsDescriptionMetadata";
import { AssigningScatterMarkerStyleEventArgsDescriptionMetadata } from "./AssigningScatterMarkerStyleEventArgsDescriptionMetadata";
import { GeographicMapSeriesHostDescriptionMetadata } from "./GeographicMapSeriesHostDescriptionMetadata";
import { GeographicSymbolSeriesDescription } from "./GeographicSymbolSeriesDescription";
/**
 * @hidden
 */
var GeographicSymbolSeriesDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(GeographicSymbolSeriesDescriptionMetadata, _super);
    function GeographicSymbolSeriesDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GeographicSymbolSeriesDescriptionMetadata.b = function (a) {
        if (GeographicSymbolSeriesDescriptionMetadata.a == null) {
            GeographicSymbolSeriesDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            GeographicSymbolSeriesDescriptionMetadata.c(a, GeographicSymbolSeriesDescriptionMetadata.a);
            AssigningScatterStyleEventArgsDescriptionMetadata.d(a);
            AssigningScatterMarkerStyleEventArgsDescriptionMetadata.d(a);
        }
    };
    GeographicSymbolSeriesDescriptionMetadata.c = function (a, b) {
        GeographicMapSeriesHostDescriptionMetadata.c(a, b);
        b.item("LatitudeMemberPath", "String");
        b.item("LongitudeMemberPath", "String");
        b.item("MarkerType", "ExportedType:string:MarkerType");
        b.item("MarkerType@names", "Unset;None;Automatic;Circle;Triangle;Pyramid;Square;Diamond;Pentagon;Hexagon;Tetragram;Pentagram;Hexagram;Hidden");
        b.item("MarkerCollisionAvoidance", "ExportedType:string:CollisionAvoidanceType");
        b.item("MarkerCollisionAvoidance@names", "None;Omit;Fade;OmitAndShift;FadeAndShift");
        b.item("MarkerOutlineMode", "ExportedType:string:MarkerOutlineMode");
        b.item("MarkerOutlineMode@names", "Auto;Normal;MatchMarkerBrush");
        b.item("MarkerFillMode", "ExportedType:string:MarkerFillMode");
        b.item("MarkerFillMode@names", "Auto;Normal;MatchMarkerOutline");
        b.item("MarkerTemplateRef", "(w:MarkerTemplate,wf:MarkerTemplate)DataRef::object");
        b.item("MarkerBrush", "Brush");
        b.item("MarkerOutline", "Brush");
        b.item("MaximumMarkers", "Number:int");
        b.item("MarkerThickness", "Number:double");
        b.item("IsCustomScatterStyleAllowed", "Boolean");
        b.item("IsCustomScatterMarkerStyleAllowed", "Boolean");
        b.item("ItemSearchMode", "ExportedType:string:ScatterItemSearchMode");
        b.item("ItemSearchMode@names", "Auto;ClosestVisiblePoint;ClosestPoint;ClosestVisiblePointOnClosestLine;ClosestPointOnClosestLine;None");
        b.item("ItemSearchThreshold", "Number:int");
        b.item("AssigningScatterStyleRef", "EventRef::assigningScatterStyle");
        b.item("AssigningScatterMarkerStyleRef", "EventRef::assigningScatterMarkerStyle");
    };
    GeographicSymbolSeriesDescriptionMetadata.d = function (a) {
        GeographicSymbolSeriesDescriptionMetadata.b(a);
        a.q("GeographicSymbolSeries", function () { return new GeographicSymbolSeriesDescription(); });
        a.p("GeographicSymbolSeries", GeographicSymbolSeriesDescriptionMetadata.a);
    };
    GeographicSymbolSeriesDescriptionMetadata.$t = markType(GeographicSymbolSeriesDescriptionMetadata, 'GeographicSymbolSeriesDescriptionMetadata');
    GeographicSymbolSeriesDescriptionMetadata.a = null;
    return GeographicSymbolSeriesDescriptionMetadata;
}(Base));
export { GeographicSymbolSeriesDescriptionMetadata };
//# sourceMappingURL=GeographicSymbolSeriesDescriptionMetadata.js.map
