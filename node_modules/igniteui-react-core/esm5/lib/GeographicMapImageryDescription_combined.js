/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { Description } from "./Description";
import { markType } from "./type";
import { SeriesViewerDescription } from "./SeriesViewerDescription";
/**
 * @hidden
 */
var GeographicMapImageryDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(GeographicMapImageryDescription, _super);
    function GeographicMapImageryDescription() {
        var _this = _super.call(this) || this;
        _this.h = null;
        _this.f = null;
        _this.r = null;
        _this.j = false;
        _this.s = null;
        _this.l = 0;
        _this.q = null;
        _this.p = null;
        _this.n = null;
        _this.o = null;
        return _this;
    }
    GeographicMapImageryDescription.prototype.get_type = function () {
        return "GeographicMapImagery";
    };
    Object.defineProperty(GeographicMapImageryDescription.prototype, "type", {
        get: function () {
            return this.get_type();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GeographicMapImageryDescription.prototype, "windowRect", {
        get: function () {
            return this.h;
        },
        set: function (a) {
            this.h = a;
            this.e("WindowRect");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GeographicMapImageryDescription.prototype, "geographicMap", {
        get: function () {
            return this.f;
        },
        set: function (a) {
            this.f = a;
            this.e("GeographicMap");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GeographicMapImageryDescription.prototype, "referer", {
        get: function () {
            return this.r;
        },
        set: function (a) {
            this.r = a;
            this.e("Referer");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GeographicMapImageryDescription.prototype, "isHorizontalWrappingEnabled", {
        get: function () {
            return this.j;
        },
        set: function (a) {
            this.j = a;
            this.e("IsHorizontalWrappingEnabled");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GeographicMapImageryDescription.prototype, "userAgent", {
        get: function () {
            return this.s;
        },
        set: function (a) {
            this.s = a;
            this.e("UserAgent");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GeographicMapImageryDescription.prototype, "opacity", {
        get: function () {
            return this.l;
        },
        set: function (a) {
            this.l = a;
            this.e("Opacity");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GeographicMapImageryDescription.prototype, "imageTilesReadyRef", {
        get: function () {
            return this.q;
        },
        set: function (a) {
            this.q = a;
            this.e("ImageTilesReadyRef");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GeographicMapImageryDescription.prototype, "imagesChangedRef", {
        get: function () {
            return this.p;
        },
        set: function (a) {
            this.p = a;
            this.e("ImagesChangedRef");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GeographicMapImageryDescription.prototype, "cancellingImageRef", {
        get: function () {
            return this.n;
        },
        set: function (a) {
            this.n = a;
            this.e("CancellingImageRef");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GeographicMapImageryDescription.prototype, "downloadingImageRef", {
        get: function () {
            return this.o;
        },
        set: function (a) {
            this.o = a;
            this.e("DownloadingImageRef");
        },
        enumerable: true,
        configurable: true
    });
    GeographicMapImageryDescription.$t = markType(GeographicMapImageryDescription, 'GeographicMapImageryDescription', Description.$);
    return GeographicMapImageryDescription;
}(Description));
export { GeographicMapImageryDescription };
/**
 * @hidden
 */
var GeographicMapDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(GeographicMapDescription, _super);
    function GeographicMapDescription() {
        var _this = _super.call(this) || this;
        _this.ey = false;
        _this.fa = null;
        _this.ev = false;
        _this.e7 = null;
        _this.ex = false;
        _this.ew = false;
        _this.es = null;
        _this.er = null;
        _this.ep = null;
        _this.e4 = 0;
        _this.e3 = 0;
        _this.e9 = null;
        _this.fb = null;
        _this.e8 = null;
        return _this;
    }
    GeographicMapDescription.prototype.get_type = function () {
        return "GeographicMap";
    };
    Object.defineProperty(GeographicMapDescription.prototype, "zoomable", {
        get: function () {
            return this.ey;
        },
        set: function (a) {
            this.ey = a;
            this.e("Zoomable");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GeographicMapDescription.prototype, "resizeBehavior", {
        get: function () {
            return this.fa;
        },
        set: function (a) {
            this.fa = a;
            this.e("ResizeBehavior");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GeographicMapDescription.prototype, "isHorizontalWrappingEnabled", {
        get: function () {
            return this.ev;
        },
        set: function (a) {
            this.ev = a;
            this.e("IsHorizontalWrappingEnabled");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GeographicMapDescription.prototype, "backgroundTilingMode", {
        get: function () {
            return this.e7;
        },
        set: function (a) {
            this.e7 = a;
            this.e("BackgroundTilingMode");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GeographicMapDescription.prototype, "useWorldRectForZoomBounds", {
        get: function () {
            return this.ex;
        },
        set: function (a) {
            this.ex = a;
            this.e("UseWorldRectForZoomBounds");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GeographicMapDescription.prototype, "suppressZoomResetOnWorldRectChange", {
        get: function () {
            return this.ew;
        },
        set: function (a) {
            this.ew = a;
            this.e("SuppressZoomResetOnWorldRectChange");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GeographicMapDescription.prototype, "worldRect", {
        get: function () {
            return this.es;
        },
        set: function (a) {
            this.es = a;
            this.e("WorldRect");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GeographicMapDescription.prototype, "actualWorldRect", {
        get: function () {
            return this.er;
        },
        set: function (a) {
            this.er = a;
            this.e("ActualWorldRect");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GeographicMapDescription.prototype, "backgroundContent", {
        get: function () {
            return this.ep;
        },
        set: function (a) {
            this.ep = a;
            this.e("BackgroundContent");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GeographicMapDescription.prototype, "windowScale", {
        get: function () {
            return this.e4;
        },
        set: function (a) {
            this.e4 = a;
            this.e("WindowScale");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GeographicMapDescription.prototype, "actualWindowScale", {
        get: function () {
            return this.e3;
        },
        set: function (a) {
            this.e3 = a;
            this.e("ActualWindowScale");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GeographicMapDescription.prototype, "imageTilesReadyRef", {
        get: function () {
            return this.e9;
        },
        set: function (a) {
            this.e9 = a;
            this.e("ImageTilesReadyRef");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GeographicMapDescription.prototype, "width", {
        get: function () {
            return this.fb;
        },
        set: function (a) {
            this.fb = a;
            this.e("Width");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GeographicMapDescription.prototype, "height", {
        get: function () {
            return this.e8;
        },
        set: function (a) {
            this.e8 = a;
            this.e("Height");
        },
        enumerable: true,
        configurable: true
    });
    GeographicMapDescription.$t = markType(GeographicMapDescription, 'GeographicMapDescription', SeriesViewerDescription.$);
    return GeographicMapDescription;
}(SeriesViewerDescription));
export { GeographicMapDescription };
//# sourceMappingURL=GeographicMapImageryDescription_combined.js.map
