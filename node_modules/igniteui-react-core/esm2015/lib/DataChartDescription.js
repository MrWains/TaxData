/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { SeriesViewerDescription } from "./SeriesViewerDescription";
import { markType } from "./type";
/**
 * @hidden
 */
export let DataChartDescription = /*@__PURE__*/ (() => {
    class DataChartDescription extends SeriesViewerDescription {
        constructor() {
            super();
            this.e1 = false;
            this.fl = 0;
            this.fm = 0;
            this.fd = 0;
            this.fe = 0;
            this.e0 = false;
            this.e2 = false;
            this.f5 = null;
            this.ez = false;
            this.eq = null;
            this.fg = 0;
            this.ff = 0;
            this.e3 = false;
            this.er = null;
            this.et = null;
            this.es = null;
            this.f4 = null;
            this.f2 = null;
            this.f3 = null;
            this.ep = null;
            this.fa = 0;
            this.fc = 0;
            this.fb = 0;
            this.e9 = 0;
            this.f1 = null;
            this.fi = 0;
            this.fk = 0;
            this.fj = 0;
            this.fh = 0;
            this.f7 = null;
            this.f6 = null;
        }
        get_type() {
            return "DataChart";
        }
        get isSquare() {
            return this.e1;
        }
        set isSquare(a) {
            this.e1 = a;
            this.e("IsSquare");
        }
        get windowScaleHorizontal() {
            return this.fl;
        }
        set windowScaleHorizontal(a) {
            this.fl = a;
            this.e("WindowScaleHorizontal");
        }
        get windowScaleVertical() {
            return this.fm;
        }
        set windowScaleVertical(a) {
            this.fm = a;
            this.e("WindowScaleVertical");
        }
        get actualWindowScaleHorizontal() {
            return this.fd;
        }
        set actualWindowScaleHorizontal(a) {
            this.fd = a;
            this.e("ActualWindowScaleHorizontal");
        }
        get actualWindowScaleVertical() {
            return this.fe;
        }
        set actualWindowScaleVertical(a) {
            this.fe = a;
            this.e("ActualWindowScaleVertical");
        }
        get isHorizontalZoomEnabled() {
            return this.e0;
        }
        set isHorizontalZoomEnabled(a) {
            this.e0 = a;
            this.e("IsHorizontalZoomEnabled");
        }
        get isVerticalZoomEnabled() {
            return this.e2;
        }
        set isVerticalZoomEnabled(a) {
            this.e2 = a;
            this.e("IsVerticalZoomEnabled");
        }
        get gridMode() {
            return this.f5;
        }
        set gridMode(a) {
            this.f5 = a;
            this.e("GridMode");
        }
        get alignsGridLinesToPixels() {
            return this.ez;
        }
        set alignsGridLinesToPixels(a) {
            this.ez = a;
            this.e("AlignsGridLinesToPixels");
        }
        get brushes() {
            return this.eq;
        }
        set brushes(a) {
            this.eq = a;
            this.e("Brushes");
        }
        get autoExpandMarginMaximumValue() {
            return this.fg;
        }
        set autoExpandMarginMaximumValue(a) {
            this.fg = a;
            this.e("AutoExpandMarginMaximumValue");
        }
        get autoExpandMarginExtraPadding() {
            return this.ff;
        }
        set autoExpandMarginExtraPadding(a) {
            this.ff = a;
            this.e("AutoExpandMarginExtraPadding");
        }
        get shouldAutoExpandMarginForInitialLabels() {
            return this.e3;
        }
        set shouldAutoExpandMarginForInitialLabels(a) {
            this.e3 = a;
            this.e("ShouldAutoExpandMarginForInitialLabels");
        }
        get markerBrushes() {
            return this.er;
        }
        set markerBrushes(a) {
            this.er = a;
            this.e("MarkerBrushes");
        }
        get outlines() {
            return this.et;
        }
        set outlines(a) {
            this.et = a;
            this.e("Outlines");
        }
        get markerOutlines() {
            return this.es;
        }
        set markerOutlines(a) {
            this.es = a;
            this.e("MarkerOutlines");
        }
        get defaultAxisStroke() {
            return this.f4;
        }
        set defaultAxisStroke(a) {
            this.f4 = a;
            this.e("DefaultAxisStroke");
        }
        get defaultAxisMajorStroke() {
            return this.f2;
        }
        set defaultAxisMajorStroke(a) {
            this.f2 = a;
            this.e("DefaultAxisMajorStroke");
        }
        get defaultAxisMinorStroke() {
            return this.f3;
        }
        set defaultAxisMinorStroke(a) {
            this.f3 = a;
            this.e("DefaultAxisMinorStroke");
        }
        get axes() {
            return this.ep;
        }
        set axes(a) {
            this.ep = a;
            this.e("Axes");
        }
        get actualPlotAreaMarginLeft() {
            return this.fa;
        }
        set actualPlotAreaMarginLeft(a) {
            this.fa = a;
            this.e("ActualPlotAreaMarginLeft");
        }
        get actualPlotAreaMarginTop() {
            return this.fc;
        }
        set actualPlotAreaMarginTop(a) {
            this.fc = a;
            this.e("ActualPlotAreaMarginTop");
        }
        get actualPlotAreaMarginRight() {
            return this.fb;
        }
        set actualPlotAreaMarginRight(a) {
            this.fb = a;
            this.e("ActualPlotAreaMarginRight");
        }
        get actualPlotAreaMarginBottom() {
            return this.e9;
        }
        set actualPlotAreaMarginBottom(a) {
            this.e9 = a;
            this.e("ActualPlotAreaMarginBottom");
        }
        get computedPlotAreaMarginMode() {
            return this.f1;
        }
        set computedPlotAreaMarginMode(a) {
            this.f1 = a;
            this.e("ComputedPlotAreaMarginMode");
        }
        get plotAreaMarginLeft() {
            return this.fi;
        }
        set plotAreaMarginLeft(a) {
            this.fi = a;
            this.e("PlotAreaMarginLeft");
        }
        get plotAreaMarginTop() {
            return this.fk;
        }
        set plotAreaMarginTop(a) {
            this.fk = a;
            this.e("PlotAreaMarginTop");
        }
        get plotAreaMarginRight() {
            return this.fj;
        }
        set plotAreaMarginRight(a) {
            this.fj = a;
            this.e("PlotAreaMarginRight");
        }
        get plotAreaMarginBottom() {
            return this.fh;
        }
        set plotAreaMarginBottom(a) {
            this.fh = a;
            this.e("PlotAreaMarginBottom");
        }
        get width() {
            return this.f7;
        }
        set width(a) {
            this.f7 = a;
            this.e("Width");
        }
        get height() {
            return this.f6;
        }
        set height(a) {
            this.f6 = a;
            this.e("Height");
        }
    }
    DataChartDescription.$t = /*@__PURE__*/ markType(DataChartDescription, 'DataChartDescription', SeriesViewerDescription.$);
    return DataChartDescription;
})();
//# sourceMappingURL=DataChartDescription.js.map
