/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, fromEnum, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { List$1 } from "./List$1";
import { HashSet$1 } from "./HashSet$1";
import { StringBuilder } from "./StringBuilder";
import { stringJoin1 } from "./string";
/**
 * @hidden
 */
export let CodeGeneratingImportManager = /*@__PURE__*/ (() => {
    class CodeGeneratingImportManager extends Base {
        constructor() {
            super(...arguments);
            this._isImportsOnly = false;
            this.i = new List$1(String_$type, 0);
            this.g = new HashSet$1(String_$type, 0);
            this.h = new List$1(String_$type, 0);
            this.e = new Dictionary$2(String_$type, List$1.$.specialize(String_$type), 0);
            this.f = new Dictionary$2(String_$type, HashSet$1.$.specialize(String_$type), 0);
        }
        get isImportsOnly() {
            return this._isImportsOnly;
        }
        set isImportsOnly(a) {
            this._isImportsOnly = a;
        }
        addUsing(a) {
            if (!this.g.contains(a)) {
                this.g.add_1(a);
                this.i.add(a);
            }
        }
        get hasPackageImports() {
            return this.e.count > 0;
        }
        packageImportsToString() {
            let a = new StringBuilder(0);
            for (let b = 0; b < this.h.count; b++) {
                let c = this.h._inner[b];
                let d = this.e.item(c);
                let e = stringJoin1(String_$type, ", ", d);
                if (this.isImportsOnly && b > 0) {
                    a.u(",");
                }
                if (this.isImportsOnly) {
                    a.l(e);
                }
                else {
                    a.u("import { " + e + " } from '" + c + "';");
                }
            }
            return a.toString();
        }
        usingsToString() {
            let a = new StringBuilder(0);
            for (let b = 0; b < this.i.count; b++) {
                a.u(this.i._inner[b]);
            }
            return a.toString();
        }
        addPackageImport(a, b) {
            if (!this.f.containsKey(a)) {
                this.h.add(a);
                this.f.addItem(a, new HashSet$1(String_$type, 0));
                this.e.addItem(a, new List$1(String_$type, 0));
            }
            if (!this.f.item(a).contains(b)) {
                this.f.item(a).add_1(b);
                this.e.item(a).add(b);
            }
        }
        static merge(a, b) {
            let c = new CodeGeneratingImportManager();
            if (a.isImportsOnly || b.isImportsOnly) {
                c.isImportsOnly = true;
            }
            if (b.e.count > 0 || a.e.count > 0) {
                for (let d of fromEnum(a.e.keys)) {
                    for (let e of fromEnum(a.e.item(d))) {
                        c.addPackageImport(d, e);
                    }
                }
                for (let f of fromEnum(b.e.keys)) {
                    for (let g of fromEnum(b.e.item(f))) {
                        c.addPackageImport(f, g);
                    }
                }
            }
            else {
                for (let h of fromEnum(a.i)) {
                    c.addUsing(h);
                }
                for (let i of fromEnum(b.i)) {
                    c.addUsing(i);
                }
            }
            return c;
        }
        removeDuplicates(a) {
            let b = CodeGeneratingImportManager.merge(this, new CodeGeneratingImportManager());
            if (this.isImportsOnly) {
                b.isImportsOnly = true;
            }
            if (a.e.count > 0) {
                for (let c of fromEnum(a.e.keys)) {
                    if (this.e.containsKey(c)) {
                        for (let d of fromEnum(a.e.item(c))) {
                            if (b.f.containsKey(c) && b.f.item(c).contains(d)) {
                                b.f.item(c).remove(d);
                                b.e.item(c).remove(d);
                                if (b.e.item(c).count == 0) {
                                    b.h.remove(c);
                                    b.f.removeItem(c);
                                    b.e.removeItem(c);
                                }
                            }
                        }
                    }
                }
            }
            else {
                for (let e of fromEnum(a.i)) {
                    if (b.g.contains(e)) {
                        b.g.remove(e);
                        b.i.remove(e);
                    }
                }
            }
            return b;
        }
    }
    CodeGeneratingImportManager.$t = /*@__PURE__*/ markType(CodeGeneratingImportManager, 'CodeGeneratingImportManager');
    return CodeGeneratingImportManager;
})();
//# sourceMappingURL=CodeGeneratingImportManager.js.map
