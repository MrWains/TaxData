/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { SeriesDescription } from "./SeriesDescription";
import { markType } from "./type";
/**
 * @hidden
 */
export let ValueOverlayDescription = /*@__PURE__*/ (() => {
    class ValueOverlayDescription extends SeriesDescription {
        constructor() {
            super();
            this.c8 = null;
            this.cv = 0;
            this.co = false;
            this.c5 = null;
            this.c7 = null;
            this.c4 = null;
            this.c2 = 0;
            this.c6 = null;
            this.cr = 0;
            this.ct = 0;
            this.cs = 0;
            this.cq = 0;
            this.cu = 0;
        }
        get_type() {
            return "ValueOverlay";
        }
        get axisRef() {
            return this.c8;
        }
        set axisRef(a) {
            this.c8 = a;
            this.e("AxisRef");
        }
        get value() {
            return this.cv;
        }
        set value(a) {
            this.cv = a;
            this.e("Value");
        }
        get isAxisAnnotationEnabled() {
            return this.co;
        }
        set isAxisAnnotationEnabled(a) {
            this.co = a;
            this.e("IsAxisAnnotationEnabled");
        }
        get axisAnnotationFormatLabelRef() {
            return this.c5;
        }
        set axisAnnotationFormatLabelRef(a) {
            this.c5 = a;
            this.e("AxisAnnotationFormatLabelRef");
        }
        get axisAnnotationTextColor() {
            return this.c7;
        }
        set axisAnnotationTextColor(a) {
            this.c7 = a;
            this.e("AxisAnnotationTextColor");
        }
        get axisAnnotationBackground() {
            return this.c4;
        }
        set axisAnnotationBackground(a) {
            this.c4 = a;
            this.e("AxisAnnotationBackground");
        }
        get axisAnnotationInterpolatedValuePrecision() {
            return this.c2;
        }
        set axisAnnotationInterpolatedValuePrecision(a) {
            this.c2 = a;
            this.e("AxisAnnotationInterpolatedValuePrecision");
        }
        get axisAnnotationOutline() {
            return this.c6;
        }
        set axisAnnotationOutline(a) {
            this.c6 = a;
            this.e("AxisAnnotationOutline");
        }
        get axisAnnotationPaddingLeft() {
            return this.cr;
        }
        set axisAnnotationPaddingLeft(a) {
            this.cr = a;
            this.e("AxisAnnotationPaddingLeft");
        }
        get axisAnnotationPaddingTop() {
            return this.ct;
        }
        set axisAnnotationPaddingTop(a) {
            this.ct = a;
            this.e("AxisAnnotationPaddingTop");
        }
        get axisAnnotationPaddingRight() {
            return this.cs;
        }
        set axisAnnotationPaddingRight(a) {
            this.cs = a;
            this.e("AxisAnnotationPaddingRight");
        }
        get axisAnnotationPaddingBottom() {
            return this.cq;
        }
        set axisAnnotationPaddingBottom(a) {
            this.cq = a;
            this.e("AxisAnnotationPaddingBottom");
        }
        get axisAnnotationStrokeThickness() {
            return this.cu;
        }
        set axisAnnotationStrokeThickness(a) {
            this.cu = a;
            this.e("AxisAnnotationStrokeThickness");
        }
    }
    ValueOverlayDescription.$t = /*@__PURE__*/ markType(ValueOverlayDescription, 'ValueOverlayDescription', SeriesDescription.$);
    return ValueOverlayDescription;
})();
//# sourceMappingURL=ValueOverlayDescription.js.map
