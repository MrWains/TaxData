/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { ValueChangedEventArgsDescriptionMetadata } from "./ValueChangedEventArgsDescriptionMetadata";
import { GotFocusEventArgsDescriptionMetadata } from "./GotFocusEventArgsDescriptionMetadata";
import { LostFocusEventArgsDescriptionMetadata } from "./LostFocusEventArgsDescriptionMetadata";
import { KeyEventArgsDescriptionMetadata } from "./KeyEventArgsDescriptionMetadata";
import { InputChangeEventArgsDescriptionMetadata } from "./InputChangeEventArgsDescriptionMetadata";
import { DatePickerDescription } from "./DatePickerDescription";
/**
 * @hidden
 */
export let DatePickerDescriptionMetadata = /*@__PURE__*/ (() => {
    class DatePickerDescriptionMetadata extends Base {
        static b(a) {
            if (DatePickerDescriptionMetadata.a == null) {
                DatePickerDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                DatePickerDescriptionMetadata.c(a, DatePickerDescriptionMetadata.a);
                ValueChangedEventArgsDescriptionMetadata.d(a);
                GotFocusEventArgsDescriptionMetadata.d(a);
                LostFocusEventArgsDescriptionMetadata.d(a);
                KeyEventArgsDescriptionMetadata.d(a);
                InputChangeEventArgsDescriptionMetadata.d(a);
            }
        }
        static c(a, b) {
            b.item("Value", "Date");
            b.item("Today", "Date");
            b.item("Label", "String");
            b.item("LabelTextColor", "Brush");
            b.item("LabelFontFamily", "(w:LabelFontFamily/FontFamilyTransform,wf:LabelFontFamily,web:labelTextStyle/FontFamilyTransform)String");
            b.item("LabelFontSize", "(w:LabelFontSize,wf:LabelFontSize,web:labelTextStyle/FontSizeTransform)Number:double");
            b.item("LabelFontStyle", "(w:LabelFontStyle/FontStyleTransform,wf:LabelFontFamily/FontStyleTransform,web:labelTextStyle/FontStyleTransform)String");
            b.item("LabelFontWeight", "(w:LabelFontWeight/FontWeightTransform,wf:LabelFontFamily/FontWeightTransform,web:labelTextStyle/FontWeightTransform)String");
            b.item("Placeholder", "String");
            b.item("MinDate", "Date");
            b.item("MaxDate", "Date");
            b.item("Density", "ExportedType:string:ControlDisplayDensity");
            b.item("Density@names", "Auto;Comfortable;Cosy;Compact");
            b.item("BaseTheme", "ExportedType:string:BaseControlTheme");
            b.item("BaseTheme@names", "Default;DenaliLight;MaterialLight");
            b.item("TextFontFamily", "(w:TextFontFamily/FontFamilyTransform,wf:TextFontFamily,web:textStyle/FontFamilyTransform)String");
            b.item("TextFontSize", "(w:TextFontSize,wf:TextFontSize,web:textStyle/FontSizeTransform)Number:double");
            b.item("TextFontStyle", "(w:TextFontStyle/FontStyleTransform,wf:TextFontFamily/FontStyleTransform,web:textStyle/FontStyleTransform)String");
            b.item("TextFontWeight", "(w:TextFontWeight/FontWeightTransform,wf:TextFontFamily/FontWeightTransform,web:textStyle/FontWeightTransform)String");
            b.item("TextColor", "Brush");
            b.item("IconColor", "Brush");
            b.item("ShowClearButton", "Boolean");
            b.item("ShowTodayButton", "Boolean");
            b.item("AllowTextInput", "Boolean");
            b.item("OpenOnFocus", "Boolean");
            b.item("FirstDayOfWeek", "ExportedType:string:DayOfWeek");
            b.item("FirstDayOfWeek@names", "Sunday;Monday;Tuesday;Wednesday;Thursday;Friday;Saturday");
            b.item("FirstWeekOfYear", "ExportedType:string:FirstWeek");
            b.item("FirstWeekOfYear@names", "FirstDay;FirstFullWeek;FirstFourDayWeek");
            b.item("ShowWeekNumbers", "Boolean");
            b.item("DateFormat", "ExportedType:string:DateFormats");
            b.item("DateFormat@names", "DateShort;DateLong");
            b.item("FormatString", "String");
            b.item("ValueChangedRef", "EventRef::valueChanged");
            b.item("GotFocusRef", "EventRef::gotFocus");
            b.item("LostFocusRef", "EventRef::lostFocus");
            b.item("KeyDownRef", "EventRef::keyDown");
            b.item("ChangingRef", "EventRef::changing");
        }
        static d(a) {
            DatePickerDescriptionMetadata.b(a);
            a.q("DatePicker", () => new DatePickerDescription());
            a.p("DatePicker", DatePickerDescriptionMetadata.a);
        }
    }
    DatePickerDescriptionMetadata.$t = /*@__PURE__*/ markType(DatePickerDescriptionMetadata, 'DatePickerDescriptionMetadata');
    DatePickerDescriptionMetadata.a = null;
    return DatePickerDescriptionMetadata;
})();
//# sourceMappingURL=DatePickerDescriptionMetadata.js.map
