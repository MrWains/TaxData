/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { CellInfoDescription } from "./CellInfoDescription";
import { markType } from "./type";
/**
 * @hidden
 */
export let NumericCellInfoDescription = /*@__PURE__*/ (() => {
    class NumericCellInfoDescription extends CellInfoDescription {
        constructor() {
            super();
            this.fi = 0;
            this.fe = false;
            this.fs = null;
            this.fb = null;
            this.fr = null;
            this.ft = null;
            this.fv = null;
            this.fu = null;
            this.fw = null;
            this.fk = 0;
            this.fl = 0;
            this.fm = 0;
            this.ff = false;
        }
        get_type() {
            return "NumericCellInfo";
        }
        get numericValue() {
            return this.fi;
        }
        set numericValue(a) {
            this.fi = a;
            this.e("NumericValue");
        }
        get hasDecimalValue() {
            return this.fe;
        }
        set hasDecimalValue(a) {
            this.fe = a;
            this.e("HasDecimalValue");
        }
        get formatStringOverride() {
            return this.fs;
        }
        set formatStringOverride(a) {
            this.fs = a;
            this.e("FormatStringOverride");
        }
        get formatSpecifiers() {
            return this.fb;
        }
        set formatSpecifiers(a) {
            this.fb = a;
            this.e("FormatSpecifiers");
        }
        get formatOverrideRef() {
            return this.fr;
        }
        set formatOverrideRef(a) {
            this.fr = a;
            this.e("FormatOverrideRef");
        }
        get negativePrefix() {
            return this.ft;
        }
        set negativePrefix(a) {
            this.ft = a;
            this.e("NegativePrefix");
        }
        get positivePrefix() {
            return this.fv;
        }
        set positivePrefix(a) {
            this.fv = a;
            this.e("PositivePrefix");
        }
        get negativeSuffix() {
            return this.fu;
        }
        set negativeSuffix(a) {
            this.fu = a;
            this.e("NegativeSuffix");
        }
        get positiveSuffix() {
            return this.fw;
        }
        set positiveSuffix(a) {
            this.fw = a;
            this.e("PositiveSuffix");
        }
        get maxFractionDigits() {
            return this.fk;
        }
        set maxFractionDigits(a) {
            this.fk = a;
            this.e("MaxFractionDigits");
        }
        get minFractionDigits() {
            return this.fl;
        }
        set minFractionDigits(a) {
            this.fl = a;
            this.e("MinFractionDigits");
        }
        get minIntegerDigits() {
            return this.fm;
        }
        set minIntegerDigits(a) {
            this.fm = a;
            this.e("MinIntegerDigits");
        }
        get showGroupingSeparator() {
            return this.ff;
        }
        set showGroupingSeparator(a) {
            this.ff = a;
            this.e("ShowGroupingSeparator");
        }
    }
    NumericCellInfoDescription.$t = /*@__PURE__*/ markType(NumericCellInfoDescription, 'NumericCellInfoDescription', CellInfoDescription.$);
    NumericCellInfoDescription.__marshalByValue1 = true;
    NumericCellInfoDescription.__marshalByValueAlias1 = "NumericCellModel";
    return NumericCellInfoDescription;
})();
//# sourceMappingURL=NumericCellInfoDescription.js.map
