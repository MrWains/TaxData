/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { XYChartDescription } from "./XYChartDescription";
import { markType } from "./type";
/**
 * @hidden
 */
export let CategoryChartDescription = /*@__PURE__*/ (() => {
    class CategoryChartDescription extends XYChartDescription {
        constructor() {
            super();
            this.jf = null;
            this.jj = null;
            this.jd = null;
            this.jb = null;
            this.i7 = 0;
            this.jg = null;
            this.jc = null;
            this.je = null;
            this.ii = false;
            this.jh = null;
            this.ji = null;
            this.is = 0;
            this.it = 0;
            this.ir = 0;
            this.iu = 0;
            this.iv = 0;
            this.ik = false;
            this.i8 = 0;
            this.ix = 0;
            this.iw = 0;
            this.iy = 0;
            this.ib = null;
            this.ic = null;
            this.ij = false;
            this.ig = false;
            this.ih = false;
        }
        get tooltipTemplateRef() {
            return this.jf;
        }
        set tooltipTemplateRef(a) {
            this.jf = a;
            this.e("TooltipTemplateRef");
        }
        get width() {
            return this.jj;
        }
        set width(a) {
            this.jj = a;
            this.e("Width");
        }
        get height() {
            return this.jd;
        }
        set height(a) {
            this.jd = a;
            this.e("Height");
        }
        get background() {
            return this.jb;
        }
        set background(a) {
            this.jb = a;
            this.e("Background");
        }
        get_type() {
            return "CategoryChart";
        }
        get transitionInDuration() {
            return this.i7;
        }
        set transitionInDuration(a) {
            this.i7 = a;
            this.e("TransitionInDuration");
        }
        get transitionInEasingFunctionRef() {
            return this.jg;
        }
        set transitionInEasingFunctionRef(a) {
            this.jg = a;
            this.e("TransitionInEasingFunctionRef");
        }
        get chartType() {
            return this.jc;
        }
        set chartType(a) {
            this.jc = a;
            this.e("ChartType");
        }
        get markerCollisionAvoidance() {
            return this.je;
        }
        set markerCollisionAvoidance(a) {
            this.je = a;
            this.e("MarkerCollisionAvoidance");
        }
        get isTransitionInEnabled() {
            return this.ii;
        }
        set isTransitionInEnabled(a) {
            this.ii = a;
            this.e("IsTransitionInEnabled");
        }
        get transitionInMode() {
            return this.jh;
        }
        set transitionInMode(a) {
            this.jh = a;
            this.e("TransitionInMode");
        }
        get transitionInSpeedType() {
            return this.ji;
        }
        set transitionInSpeedType(a) {
            this.ji = a;
            this.e("TransitionInSpeedType");
        }
        get xAxisInterval() {
            return this.is;
        }
        set xAxisInterval(a) {
            this.is = a;
            this.e("XAxisInterval");
        }
        get xAxisMinorInterval() {
            return this.it;
        }
        set xAxisMinorInterval(a) {
            this.it = a;
            this.e("XAxisMinorInterval");
        }
        get xAxisGap() {
            return this.ir;
        }
        set xAxisGap(a) {
            this.ir = a;
            this.e("XAxisGap");
        }
        get xAxisOverlap() {
            return this.iu;
        }
        set xAxisOverlap(a) {
            this.iu = a;
            this.e("XAxisOverlap");
        }
        get yAxisInterval() {
            return this.iv;
        }
        set yAxisInterval(a) {
            this.iv = a;
            this.e("YAxisInterval");
        }
        get yAxisIsLogarithmic() {
            return this.ik;
        }
        set yAxisIsLogarithmic(a) {
            this.ik = a;
            this.e("YAxisIsLogarithmic");
        }
        get yAxisLogarithmBase() {
            return this.i8;
        }
        set yAxisLogarithmBase(a) {
            this.i8 = a;
            this.e("YAxisLogarithmBase");
        }
        get yAxisMinimumValue() {
            return this.ix;
        }
        set yAxisMinimumValue(a) {
            this.ix = a;
            this.e("YAxisMinimumValue");
        }
        get yAxisMaximumValue() {
            return this.iw;
        }
        set yAxisMaximumValue(a) {
            this.iw = a;
            this.e("YAxisMaximumValue");
        }
        get yAxisMinorInterval() {
            return this.iy;
        }
        set yAxisMinorInterval(a) {
            this.iy = a;
            this.e("YAxisMinorInterval");
        }
        get negativeBrushes() {
            return this.ib;
        }
        set negativeBrushes(a) {
            this.ib = a;
            this.e("NegativeBrushes");
        }
        get negativeOutlines() {
            return this.ic;
        }
        set negativeOutlines(a) {
            this.ic = a;
            this.e("NegativeOutlines");
        }
        get yAxisAbbreviateLargeNumbers() {
            return this.ij;
        }
        set yAxisAbbreviateLargeNumbers(a) {
            this.ij = a;
            this.e("YAxisAbbreviateLargeNumbers");
        }
        get isCategoryHighlightingEnabled() {
            return this.ig;
        }
        set isCategoryHighlightingEnabled(a) {
            this.ig = a;
            this.e("IsCategoryHighlightingEnabled");
        }
        get isItemHighlightingEnabled() {
            return this.ih;
        }
        set isItemHighlightingEnabled(a) {
            this.ih = a;
            this.e("IsItemHighlightingEnabled");
        }
    }
    CategoryChartDescription.$t = /*@__PURE__*/ markType(CategoryChartDescription, 'CategoryChartDescription', XYChartDescription.$);
    return CategoryChartDescription;
})();
//# sourceMappingURL=CategoryChartDescription.js.map
