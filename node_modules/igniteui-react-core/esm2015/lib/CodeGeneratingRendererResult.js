/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, fromEnum, Number_$type, markType } from "./type";
import { List$1 } from "./List$1";
import { CodeGenerationItemBuilderPropertyInfo } from "./CodeGenerationItemBuilderPropertyInfo";
import { Dictionary$2 } from "./Dictionary$2";
import { CodeGeneratingImportManager } from "./CodeGeneratingImportManager";
/**
 * @hidden
 */
export let CodeGeneratingRendererResult = /*@__PURE__*/ (() => {
    class CodeGeneratingRendererResult extends Base {
        constructor() {
            super(...arguments);
            this.m = new List$1(CodeGenerationItemBuilderPropertyInfo.$, 0);
            this._platform = 0;
            this._generationOptions = null;
            this.i = new Dictionary$2(String_$type, List$1.$.specialize(String_$type), 0);
            this.k = new Dictionary$2(String_$type, List$1.$.specialize(CodeGeneratingImportManager.$), 0);
            this.h = new Dictionary$2(String_$type, List$1.$.specialize(String_$type), 0);
            this.g = new Dictionary$2(String_$type, Number_$type, 0);
            this.l = new Dictionary$2(String_$type, String_$type, 0);
            this.j = new Dictionary$2(String_$type, String_$type, 0);
        }
        get p() {
            return this.m;
        }
        get platform() {
            return this._platform;
        }
        set platform(a) {
            this._platform = a;
        }
        get generationOptions() {
            return this._generationOptions;
        }
        set generationOptions(a) {
            this._generationOptions = a;
        }
        addContainerResult(a, b) {
            if (!this.i.containsKey(a)) {
                this.i.addItem(a, new List$1(String_$type, 0));
            }
            let c = this.i.item(a);
            c.add(b);
        }
        addImportResult(a, b) {
            if (!this.k.containsKey(a)) {
                this.k.addItem(a, new List$1(CodeGeneratingImportManager.$, 0));
            }
            let c = this.k.item(a);
            c.add(b);
        }
        addContainerNewFileResult(a, b) {
            if (!this.h.containsKey(a)) {
                this.h.addItem(a, new List$1(String_$type, 0));
            }
            let c = this.h.item(a);
            c.add(b);
        }
        getKeys() {
            let a = new List$1(String_$type, 0);
            for (let b of fromEnum(this.i.keys)) {
                a.add(b);
            }
            return a.toArray();
        }
        getImportsKeys() {
            let a = new List$1(String_$type, 0);
            for (let b of fromEnum(this.k.keys)) {
                a.add(b);
            }
            return a.toArray();
        }
        getContentForKey(a) {
            if (!this.i.containsKey(a)) {
                return "";
            }
            let b = this.i.item(a);
            if (b.count == 1) {
                return b._inner[0];
            }
            let c = "";
            for (let d of fromEnum(b)) {
                c += d;
            }
            return c;
        }
        n(a) {
            if (!this.k.containsKey(a)) {
                return null;
            }
            return this.k.item(a);
        }
        q(a) {
            if (!this.g.containsKey(a)) {
                this.g.item(a, 1);
            }
            let b = this.g.item(a);
            let c = a + b;
            this.g.item(a, b + 1);
            return c;
        }
        z(a) {
            this.m.add(a);
        }
        getNewFiles() {
            let a = new List$1(String_$type, 0);
            for (let b of fromEnum(this.h.keys)) {
                a.add(b);
            }
            return a;
        }
        getNewFileContent(a) {
            let b = this.h.item(a);
            let c = "";
            for (let d of fromEnum(b)) {
                c += d;
            }
            return c;
        }
        defineString(a, b) {
            this.l.item(a, b);
        }
        getStringNames() {
            let a = new List$1(String_$type, 0);
            for (let b of fromEnum(this.l.keys)) {
                a.add(b);
            }
            return a.toArray();
        }
        getString(a) {
            return this.l.item(a);
        }
        trackDescriptionField(a, b) {
            this.j.item(a, b);
        }
        hasDescription(a) {
            return this.j.containsKey(a);
        }
        getDescriptionField(a) {
            return this.j.item(a);
        }
    }
    CodeGeneratingRendererResult.$t = /*@__PURE__*/ markType(CodeGeneratingRendererResult, 'CodeGeneratingRendererResult');
    return CodeGeneratingRendererResult;
})();
//# sourceMappingURL=CodeGeneratingRendererResult.js.map
