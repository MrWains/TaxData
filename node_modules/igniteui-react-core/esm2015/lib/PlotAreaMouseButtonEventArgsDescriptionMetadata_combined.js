/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { PlotAreaMouseButtonEventArgsDescription } from "./PlotAreaMouseButtonEventArgsDescription";
import { PlotAreaMouseEventArgsDescription } from "./PlotAreaMouseEventArgsDescription";
import { SeriesDescriptionMetadata } from "./SeriesDescriptionMetadata";
import { ChartCursorEventArgsDescription } from "./ChartCursorEventArgsDescription";
import { ChartMouseEventArgsDescription } from "./ChartMouseEventArgsDescription";
import { DataChartMouseButtonEventArgsDescription } from "./DataChartMouseButtonEventArgsDescription";
import { SeriesViewerManipulationEventArgsDescriptionMetadata } from "./SeriesViewerManipulationEventArgsDescriptionMetadata";
import { RectChangedEventArgsDescriptionMetadata } from "./RectChangedEventArgsDescriptionMetadata";
import { RefreshCompletedEventArgsDescriptionMetadata } from "./RefreshCompletedEventArgsDescriptionMetadata";
/**
 * @hidden
 */
export let PlotAreaMouseButtonEventArgsDescriptionMetadata = /*@__PURE__*/ (() => {
    class PlotAreaMouseButtonEventArgsDescriptionMetadata extends Base {
        static b(a) {
            if (PlotAreaMouseButtonEventArgsDescriptionMetadata.a == null) {
                PlotAreaMouseButtonEventArgsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                PlotAreaMouseButtonEventArgsDescriptionMetadata.c(a, PlotAreaMouseButtonEventArgsDescriptionMetadata.a);
                SeriesViewerDescriptionMetadata.d(a);
            }
        }
        static c(a, b) {
            b.item("ChartPosition", "Point");
            b.item("PlotAreaPosition", "Point");
            b.item("ManipulationOccurred", "Boolean");
            b.item("Viewer", "ExportedType:SeriesViewer");
        }
        static d(a) {
            PlotAreaMouseButtonEventArgsDescriptionMetadata.b(a);
            a.q("PlotAreaMouseButtonEventArgs", () => new PlotAreaMouseButtonEventArgsDescription());
            a.p("PlotAreaMouseButtonEventArgs", PlotAreaMouseButtonEventArgsDescriptionMetadata.a);
        }
    }
    PlotAreaMouseButtonEventArgsDescriptionMetadata.$t = /*@__PURE__*/ markType(PlotAreaMouseButtonEventArgsDescriptionMetadata, 'PlotAreaMouseButtonEventArgsDescriptionMetadata');
    PlotAreaMouseButtonEventArgsDescriptionMetadata.a = null;
    return PlotAreaMouseButtonEventArgsDescriptionMetadata;
})();
/**
 * @hidden
 */
export let PlotAreaMouseEventArgsDescriptionMetadata = /*@__PURE__*/ (() => {
    class PlotAreaMouseEventArgsDescriptionMetadata extends Base {
        static b(a) {
            if (PlotAreaMouseEventArgsDescriptionMetadata.a == null) {
                PlotAreaMouseEventArgsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                PlotAreaMouseEventArgsDescriptionMetadata.c(a, PlotAreaMouseEventArgsDescriptionMetadata.a);
                SeriesViewerDescriptionMetadata.d(a);
            }
        }
        static c(a, b) {
            b.item("ChartPosition", "Point");
            b.item("PlotAreaPosition", "Point");
            b.item("IsDuringManipulation", "Boolean");
            b.item("Viewer", "ExportedType:SeriesViewer");
        }
        static d(a) {
            PlotAreaMouseEventArgsDescriptionMetadata.b(a);
            a.q("PlotAreaMouseEventArgs", () => new PlotAreaMouseEventArgsDescription());
            a.p("PlotAreaMouseEventArgs", PlotAreaMouseEventArgsDescriptionMetadata.a);
        }
    }
    PlotAreaMouseEventArgsDescriptionMetadata.$t = /*@__PURE__*/ markType(PlotAreaMouseEventArgsDescriptionMetadata, 'PlotAreaMouseEventArgsDescriptionMetadata');
    PlotAreaMouseEventArgsDescriptionMetadata.a = null;
    return PlotAreaMouseEventArgsDescriptionMetadata;
})();
/**
 * @hidden
 */
export let ChartCursorEventArgsDescriptionMetadata = /*@__PURE__*/ (() => {
    class ChartCursorEventArgsDescriptionMetadata extends Base {
        static b(a) {
            if (ChartCursorEventArgsDescriptionMetadata.a == null) {
                ChartCursorEventArgsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                ChartCursorEventArgsDescriptionMetadata.c(a, ChartCursorEventArgsDescriptionMetadata.a);
                SeriesDescriptionMetadata.d(a);
                SeriesViewerDescriptionMetadata.d(a);
            }
        }
        static c(a, b) {
            b.item("ItemRef", "(w:Item,wf:Item)DataRef");
            b.item("Series", "ExportedType:Series");
            b.item("SeriesViewer", "ExportedType:SeriesViewer");
        }
        static d(a) {
            ChartCursorEventArgsDescriptionMetadata.b(a);
            a.q("ChartCursorEventArgs", () => new ChartCursorEventArgsDescription());
            a.p("ChartCursorEventArgs", ChartCursorEventArgsDescriptionMetadata.a);
        }
    }
    ChartCursorEventArgsDescriptionMetadata.$t = /*@__PURE__*/ markType(ChartCursorEventArgsDescriptionMetadata, 'ChartCursorEventArgsDescriptionMetadata');
    ChartCursorEventArgsDescriptionMetadata.a = null;
    return ChartCursorEventArgsDescriptionMetadata;
})();
/**
 * @hidden
 */
export let ChartMouseEventArgsDescriptionMetadata = /*@__PURE__*/ (() => {
    class ChartMouseEventArgsDescriptionMetadata extends Base {
        static b(a) {
            if (ChartMouseEventArgsDescriptionMetadata.a == null) {
                ChartMouseEventArgsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                ChartMouseEventArgsDescriptionMetadata.c(a, ChartMouseEventArgsDescriptionMetadata.a);
                SeriesDescriptionMetadata.d(a);
                SeriesViewerDescriptionMetadata.d(a);
            }
        }
        static c(a, b) {
            b.item("ItemRef", "(w:Item,wf:Item)DataRef");
            b.item("Series", "ExportedType:Series");
            b.item("Chart", "ExportedType:SeriesViewer");
        }
        static d(a) {
            ChartMouseEventArgsDescriptionMetadata.b(a);
            a.q("ChartMouseEventArgs", () => new ChartMouseEventArgsDescription());
            a.p("ChartMouseEventArgs", ChartMouseEventArgsDescriptionMetadata.a);
        }
    }
    ChartMouseEventArgsDescriptionMetadata.$t = /*@__PURE__*/ markType(ChartMouseEventArgsDescriptionMetadata, 'ChartMouseEventArgsDescriptionMetadata');
    ChartMouseEventArgsDescriptionMetadata.a = null;
    return ChartMouseEventArgsDescriptionMetadata;
})();
/**
 * @hidden
 */
export let DataChartMouseButtonEventArgsDescriptionMetadata = /*@__PURE__*/ (() => {
    class DataChartMouseButtonEventArgsDescriptionMetadata extends Base {
        static b(a) {
            if (DataChartMouseButtonEventArgsDescriptionMetadata.a == null) {
                DataChartMouseButtonEventArgsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                DataChartMouseButtonEventArgsDescriptionMetadata.c(a, DataChartMouseButtonEventArgsDescriptionMetadata.a);
                SeriesDescriptionMetadata.d(a);
                SeriesViewerDescriptionMetadata.d(a);
            }
        }
        static c(a, b) {
            b.item("Handled", "Boolean");
            b.item("ItemRef", "(w:Item,wf:Item)DataRef");
            b.item("Series", "ExportedType:Series");
            b.item("Chart", "ExportedType:SeriesViewer");
        }
        static d(a) {
            DataChartMouseButtonEventArgsDescriptionMetadata.b(a);
            a.q("DataChartMouseButtonEventArgs", () => new DataChartMouseButtonEventArgsDescription());
            a.p("DataChartMouseButtonEventArgs", DataChartMouseButtonEventArgsDescriptionMetadata.a);
        }
    }
    DataChartMouseButtonEventArgsDescriptionMetadata.$t = /*@__PURE__*/ markType(DataChartMouseButtonEventArgsDescriptionMetadata, 'DataChartMouseButtonEventArgsDescriptionMetadata');
    DataChartMouseButtonEventArgsDescriptionMetadata.a = null;
    return DataChartMouseButtonEventArgsDescriptionMetadata;
})();
/**
 * @hidden
 */
export let SeriesViewerDescriptionMetadata = /*@__PURE__*/ (() => {
    class SeriesViewerDescriptionMetadata extends Base {
        static b(a) {
            if (SeriesViewerDescriptionMetadata.a == null) {
                SeriesViewerDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                SeriesViewerDescriptionMetadata.c(a, SeriesViewerDescriptionMetadata.a);
                PlotAreaMouseButtonEventArgsDescriptionMetadata.d(a);
                PlotAreaMouseEventArgsDescriptionMetadata.d(a);
                ChartCursorEventArgsDescriptionMetadata.d(a);
                DataChartMouseButtonEventArgsDescriptionMetadata.d(a);
                ChartMouseEventArgsDescriptionMetadata.d(a);
                SeriesViewerManipulationEventArgsDescriptionMetadata.d(a);
                RectChangedEventArgsDescriptionMetadata.d(a);
                RefreshCompletedEventArgsDescriptionMetadata.d(a);
            }
        }
        static c(a, b) {
            b.item("Series", "Collection:Series:SeriesCollection:Series");
            b.item("CrosshairPoint", "Point");
            b.item("LegendRef", "(w:Legend,wf:Legend)DataRef::object");
            b.item("AnimateSeriesWhenAxisRangeChanges", "Boolean");
            b.item("IsWindowSyncedToVisibleRange", "Boolean");
            b.item("ShouldSimulateHoverMoveCrosshairPoint", "Boolean");
            b.item("HighlightingMode", "ExportedType:string:SeriesHighlightingMode");
            b.item("HighlightingMode@names", "Auto;None;BrightenSpecific;Brighten;FadeOthersSpecific;FadeOthers");
            b.item("HighlightingBehavior", "ExportedType:string:SeriesHighlightingBehavior");
            b.item("HighlightingBehavior@names", "Auto;DirectlyOver;NearestItems;NearestItemsRetainMainShapes;NearestItemsAndSeries");
            b.item("LegendHighlightingMode", "ExportedType:string:LegendHighlightingMode");
            b.item("LegendHighlightingMode@names", "Auto;None;MatchSeries");
            b.item("EffectiveViewport", "Rect");
            b.item("WindowRect", "Rect");
            b.item("UseTiledZooming", "Boolean");
            b.item("PreferHigherResolutionTiles", "Boolean");
            b.item("ZoomTileCacheSize", "Number:int");
            b.item("HighlightingTransitionDuration", "Number:int");
            b.item("IsPagePanningAllowed", "Boolean");
            b.item("ContentHitTestMode", "ExportedType:string:ChartHitTestMode");
            b.item("ContentHitTestMode@names", "Auto;Computational;ColorEncoded;Mixed;MixedFavoringComputational");
            b.item("ActualContentHitTestMode", "ExportedType:string:ChartHitTestMode");
            b.item("ActualContentHitTestMode@names", "Auto;Computational;ColorEncoded;Mixed;MixedFavoringComputational");
            b.item("IsSurfaceInteractionDisabled", "Boolean");
            b.item("WindowResponse", "ExportedType:string:WindowResponse");
            b.item("WindowResponse@names", "Deferred;Immediate");
            b.item("WindowRectMinWidth", "Number:double");
            b.item("CrosshairVisibility", "ExportedType:string:Visibility");
            b.item("CrosshairVisibility@names", "Visible;Collapsed");
            b.item("ZoomCoercionMode", "ExportedType:string:ZoomCoercionMode");
            b.item("ZoomCoercionMode@names", "Auto;AxisConstrained;Unconstrained");
            b.item("PlotAreaBackground", "Brush");
            b.item("DefaultInteraction", "ExportedType:string:InteractionState");
            b.item("DefaultInteraction@names", "None;DragZoom;DragPan;Auto");
            b.item("RightButtonDefaultInteraction", "ExportedType:string:InteractionState");
            b.item("RightButtonDefaultInteraction@names", "None;DragZoom;DragPan;Auto");
            b.item("DragModifier", "ExportedType:string:ModifierKeys");
            b.item("DragModifier@names", "None;Alt;Control;Shift;Windows;Apple");
            b.item("PanModifier", "ExportedType:string:ModifierKeys");
            b.item("PanModifier@names", "None;Alt;Control;Shift;Windows;Apple");
            b.item("PreviewRect", "Rect");
            b.item("WindowPositionHorizontal", "Number:double");
            b.item("WindowPositionVertical", "Number:double");
            b.item("ChartTitle", "(w:Title,wf:Title)String");
            b.item("TitleHorizontalAlignment", "ExportedType:string:HorizontalAlignment");
            b.item("TitleHorizontalAlignment@names", "Left;Center;Right;Stretch");
            b.item("SubtitleHorizontalAlignment", "ExportedType:string:HorizontalAlignment");
            b.item("SubtitleHorizontalAlignment@names", "Left;Center;Right;Stretch");
            b.item("TitleTextStyle", "String");
            b.item("SubtitleTextStyle", "String");
            b.item("TitleTextColor", "Brush");
            b.item("SubtitleTextColor", "Brush");
            b.item("TitleTopMargin", "Number:double");
            b.item("TitleLeftMargin", "Number:double");
            b.item("TitleRightMargin", "Number:double");
            b.item("TitleBottomMargin", "Number:double");
            b.item("SubtitleTopMargin", "Number:double");
            b.item("SubtitleLeftMargin", "Number:double");
            b.item("SubtitleRightMargin", "Number:double");
            b.item("SubtitleBottomMargin", "Number:double");
            b.item("Subtitle", "String");
            b.item("TopMargin", "Number:double");
            b.item("LeftMargin", "Number:double");
            b.item("RightMargin", "Number:double");
            b.item("BottomMargin", "Number:double");
            b.item("AutoMarginWidth", "Number:double");
            b.item("AutoMarginHeight", "Number:double");
            b.item("IsAntiAliasingEnabledDuringInteraction", "Boolean");
            b.item("PixelScalingRatio", "Number:double");
            b.item("InteractionPixelScalingRatio", "Number:double");
            b.item("ActualPixelScalingRatio", "Number:double");
            b.item("ActualInteractionPixelScalingRatio", "Number:double");
            b.item("ActualWindowRect", "Rect");
            b.item("ActualWindowPositionHorizontal", "Number:double");
            b.item("ActualWindowPositionVertical", "Number:double");
            b.item("PlotAreaMouseLeftButtonDownRef", "EventRef::plotAreaMouseLeftButtonDown");
            b.item("PlotAreaMouseLeftButtonUpRef", "EventRef::plotAreaMouseLeftButtonUp");
            b.item("PlotAreaClickedRef", "EventRef::plotAreaClicked");
            b.item("PlotAreaMouseEnterRef", "EventRef::plotAreaMouseEnter");
            b.item("PlotAreaMouseLeaveRef", "EventRef::plotAreaMouseLeave");
            b.item("PlotAreaMouseOverRef", "EventRef::plotAreaMouseOver");
            b.item("SeriesCursorMouseMoveRef", "EventRef::seriesCursorMouseMove");
            b.item("SeriesMouseLeftButtonDownRef", "EventRef::seriesMouseLeftButtonDown");
            b.item("SeriesMouseLeftButtonUpRef", "EventRef::seriesMouseLeftButtonUp");
            b.item("SeriesMouseMoveRef", "EventRef::seriesMouseMove");
            b.item("SeriesMouseEnterRef", "EventRef::seriesMouseEnter");
            b.item("SeriesMouseLeaveRef", "EventRef::seriesMouseLeave");
            b.item("ViewerManipulationStartingRef", "EventRef::viewerManipulationStarting");
            b.item("ViewerManipulationEndingRef", "EventRef::viewerManipulationEnding");
            b.item("WindowRectChangedRef", "EventRef::windowRectChanged");
            b.item("SizeChangedRef", "EventRef::sizeChanged");
            b.item("ActualWindowRectChangedRef", "EventRef::actualWindowRectChanged");
            b.item("GridAreaRectChangedRef", "EventRef::gridAreaRectChanged");
            b.item("RefreshCompletedRef", "EventRef::refreshCompleted");
            SeriesViewerDescriptionMetadata.e(a, b);
        }
        static d(a) {
            SeriesViewerDescriptionMetadata.b(a);
            a.p("SeriesViewer", SeriesViewerDescriptionMetadata.a);
        }
        static e(a, b) {
            b.item("Background", "(wf:BackColor/ColorTransform)Brush");
            b.item("TitleFontFamily", "(w:TitleFontFamily/FontFamilyTransform,wf:TitleFontFamily,web:TitleTextStyle/FontFamilyTransform)String");
            b.item("TitleFontSize", "(w:TitleFontSize,wf:TitleFontSize,web:TitleTextStyle/FontSizeTransform)Number:double");
            b.item("TitleFontStyle", "(w:TitleFontStyle/FontStyleTransform,wf:TitleTextStyle/FontStyleTransform,web:TitleTextStyle/FontStyleTransform)String");
            b.item("TitleFontWeight", "(w:TitleFontWeight/FontWeightTransform,wf:TitleTextStyle/FontWeightTransform,web:TitleTextStyle/FontWeightTransform)String");
            b.item("SubtitleFontFamily", "(w:SubtitleFontFamily/FontFamilyTransform,wf:SubtitleFontFamily,web:SubtitleTextStyle/FontFamilyTransform)String");
            b.item("SubtitleFontSize", "(w:SubtitleFontSize,wf:SubtitleFontSize,web:SubtitleTextStyle/FontSizeTransform)Number:double");
            b.item("SubtitleFontStyle", "(w:SubtitleFontStyle/FontStyleTransform,wf:SubtitleTextStyle/FontStyleTransform,web:SubtitleTextStyle/FontStyleTransform)String");
            b.item("SubtitleFontWeight", "(w:SubtitleFontWeight/FontWeightTransform,wf:SubtitleTextStyle/FontWeightTransform,web:SubtitleTextStyle/FontWeightTransform)String");
        }
    }
    SeriesViewerDescriptionMetadata.$t = /*@__PURE__*/ markType(SeriesViewerDescriptionMetadata, 'SeriesViewerDescriptionMetadata');
    SeriesViewerDescriptionMetadata.a = null;
    return SeriesViewerDescriptionMetadata;
})();
//# sourceMappingURL=PlotAreaMouseButtonEventArgsDescriptionMetadata_combined.js.map
